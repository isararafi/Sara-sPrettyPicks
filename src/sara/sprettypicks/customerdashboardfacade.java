/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sara.sprettypicks;

import com.sun.jdi.connect.spi.Connection;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;


/**
 *
 * @author sarar
 */
public class customerdashboardfacade extends javax.swing.JFrame {

    surprisecheckout checkoutProcess = new surprisecheckout();

    private String userEmail; // Store the user's email
    private int orderId; // Store the order ID
    private orders obj; // Create an instance of the Orders class

    public customerdashboardfacade(String userEmail) {
        this.userEmail = userEmail; // Set the user's email
        this.obj = new orders(); // Instantiate the Orders class

        // Retrieve the order ID based on the user's email
        this.orderId = obj.getOrderIdByEmail(userEmail);

        // Debugging output
        System.out.println("Order ID for user " + userEmail + ": " + orderId);

        // Initialize components in the dashboard
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        browseproducts = new javax.swing.JButton();
        viewcart = new javax.swing.JButton();
        faqs = new javax.swing.JButton();
        checkout = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        reviews = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jButton2 = new javax.swing.JButton();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1058, 2147483647));

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));

        jButton7.setText("Create Wish List");

        jTextArea1.setBackground(new java.awt.Color(255, 204, 204));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Yu Gothic UI Semibold", 3, 12)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("AVAIL 50% OFF ON YOUR FIRST ORDER!!!                             HURRY UP :)\nBIG SUMMER CLEARANCE SALE GOING ON!\nWHAT ARE YOU WAITING FOR ?                                        ORDER NOW!");
        jScrollPane1.setViewportView(jTextArea1);

        jPanel4.setBackground(new java.awt.Color(204, 204, 255));

        jPanel2.setBackground(new java.awt.Color(255, 204, 204));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setText("DASHBOARD");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel4)
                .addContainerGap(74, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4))
        );

        browseproducts.setBackground(new java.awt.Color(204, 255, 204));
        browseproducts.setText("Browse Products");
        browseproducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseproductsActionPerformed(evt);
            }
        });

        viewcart.setBackground(new java.awt.Color(255, 255, 204));
        viewcart.setText("View Cart");
        viewcart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewcartActionPerformed(evt);
            }
        });

        faqs.setBackground(new java.awt.Color(255, 153, 153));
        faqs.setText("FAQ's");
        faqs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                faqsActionPerformed(evt);
            }
        });

        checkout.setBackground(new java.awt.Color(102, 204, 255));
        checkout.setText("CheckOut");
        checkout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutActionPerformed(evt);
            }
        });

        jButton10.setBackground(new java.awt.Color(255, 204, 51));
        jButton10.setText("Create WishLists");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(204, 153, 255));
        jButton8.setText("Show Wishlists");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setBackground(new java.awt.Color(0, 255, 204));
        jButton9.setText("Find Gift???");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(204, 204, 0));
        jButton6.setText("SURPRISE ME!!!");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        reviews.setBackground(new java.awt.Color(0, 204, 204));
        reviews.setText("give review");
        reviews.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reviewsActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(255, 153, 255));
        jButton4.setText("cancel order");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(faqs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(viewcart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(browseproducts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reviews, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(browseproducts)
                .addGap(18, 18, 18)
                .addComponent(viewcart)
                .addGap(18, 18, 18)
                .addComponent(faqs)
                .addGap(32, 32, 32)
                .addComponent(checkout)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton10)
                .addGap(18, 18, 18)
                .addComponent(jButton8)
                .addGap(27, 27, 27)
                .addComponent(jButton9)
                .addGap(18, 18, 18)
                .addComponent(jButton6)
                .addGap(28, 28, 28)
                .addComponent(reviews)
                .addGap(27, 27, 27)
                .addComponent(jButton4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1056, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton7)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(546, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(52, 52, 52))
        );

        jPanel3.setBackground(new java.awt.Color(204, 204, 255));

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 24)); // NOI18N
        jLabel2.setText("Sara's Pretty Picks");

        jButton1.setBackground(new java.awt.Color(153, 255, 255));
        jButton1.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jButton1.setText("Log out");
        jButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButton1))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jButton2.setText("jButton2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1056, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void faqsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_faqsActionPerformed
        // Create a String to store all the FAQ questions and answers
        String faqs = "Frequently Asked Questions (FAQs):\n\n"
                + "1. How do I create an account?\n"
                + "Answer: Click on the 'Sign Up' button and fill in your details.\n\n"
                + "2. How can I reset my password?\n"
                + "Answer: Click on 'Forgot Password' on the login page and follow the instructions.\n\n"
                + "3. What payment methods are accepted?\n"
                + "Answer: We accept credit cards, debit cards, and PayPal.\n\n"
                + "4. How do I track my order?\n"
                + "Answer: After placing an order, you'll receive a tracking link via email.\n\n"
                + "5. Can I return an item?\n"
                + "Answer: Yes, returns are accepted within 30 days of purchase.\n\n"
                + "6. How do I contact customer service?\n"
                + "Answer: You can reach us at support@ourshop.com or call our helpline.\n";

        // Display the FAQ list in a dialog box
        JOptionPane.showMessageDialog(this, faqs, "FAQs", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_faqsActionPerformed

    private void viewcartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewcartActionPerformed
        Database db = Database.getInstance();
        String userEmail = SessionManager.getLoggedInUserEmail(); // Get logged-in user's email

// Fetch the cart items for the logged-in user
        List<CartItem> cartItems = db.getCartItemsByEmail(userEmail);

// Prepare data to display
        StringBuilder cartDetails = new StringBuilder("Cart Items for " + userEmail + ":\n\n");

        if (cartItems.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Your cart is empty.");
        } else {
            // Display each cart item with details
            int itemNumber = 1;
            double totalCartPrice = 0; // Initialize total cart price

            for (CartItem item : cartItems) {
                String productId = String.valueOf(item.getProductId());
                String productName = item.getProductName(); // Assuming this method exists in CartItem
                int quantity = item.getQuantity();
                double price = item.getPrice();

                // Calculate total price for the current item
                double totalPriceForItem = price * quantity;

                cartDetails.append(itemNumber++)
                        .append(". Product ID: ").append(productId)
                        .append(", Product Name: ").append(productName)
                        .append(", Quantity: ").append(quantity)
                        .append(", Price per Unit: $").append(String.format("%.2f", price))
                        .append(", Total Price: $").append(String.format("%.2f", totalPriceForItem))
                        .append("\n");

                totalCartPrice += totalPriceForItem; // Add to total cart price
            }

            // Show the total cart price
            cartDetails.append("\nTotal Cart Price: $").append(String.format("%.2f", totalCartPrice)).append("\n");

            cartDetails.append("\nOptions:\n1. Clear specific item\n2. Clear entire cart\n");

            // Show the cart items and ask for user input
            String input = JOptionPane.showInputDialog(this, cartDetails.toString() + "\nEnter your option (1 or 2):");

            // Handle user input for clearing specific item or entire cart
            if (input != null) {
                if (input.equals("1")) {
                    // Clear specific item
                    String itemNumberStr = JOptionPane.showInputDialog(this, "Enter the item number to clear:");
                    if (itemNumberStr != null) {
                        try {
                            int itemNumberToClear = Integer.parseInt(itemNumberStr);
                            if (itemNumberToClear >= 1 && itemNumberToClear < itemNumber) {
                                // Get the product ID for the selected item number
                                int productIdToRemove = cartItems.get(itemNumberToClear - 1).getProductId(); // Adjusted to get product ID directly from CartItem
                                db.removeItemFromCart(userEmail, productIdToRemove); // Remove the item
                                JOptionPane.showMessageDialog(this, "Item removed successfully.");
                            } else {
                                JOptionPane.showMessageDialog(this, "Invalid item number.");
                            }
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(this, "Please enter a valid number.");
                        }
                    }
                } else if (input.equals("2")) {
                    // Clear entire cart
                    db.clearCart(userEmail); // Clears the entire cart for this user
                    JOptionPane.showMessageDialog(this, "Cart cleared successfully.");
                } else {
                    JOptionPane.showMessageDialog(this, "Invalid option.");
                }
            }
        }


    }//GEN-LAST:event_viewcartActionPerformed

    private void browseproductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseproductsActionPerformed
        browseproducts browse = new browseproducts();
        browse.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Set to dispose only BrowseProducts frame
        browse.setVisible(true);


    }//GEN-LAST:event_browseproductsActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Close the current JFrame (Log Out)
        this.dispose();

        // Open the LoginForm JFrame
        loginformfacade loginForm = new loginformfacade(); // Assuming LoginForm is the name of your login JFrame class
        loginForm.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void checkoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutActionPerformed

//surprisecheckout checkoutProcess = new surprisecheckout(); // Create a new instance to ensure no previous values
        checkoutProcess.checkout(); // Call checkout


    }//GEN-LAST:event_checkoutActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        Database db = Database.getInstance();
        String wishlistName = JOptionPane.showInputDialog(this, "Enter the name for your wishlist:");

// Validate wishlist name
        if (wishlistName != null && !wishlistName.trim().isEmpty()) {
            String userEmail = SessionManager.getLoggedInUserEmail(); // Get logged-in user's email

            // Check if the wishlist can be created
            boolean wishlistCreated = db.createWishlist(userEmail, wishlistName);
            if (wishlistCreated) {
                JOptionPane.showMessageDialog(this, "Wishlist created successfully!");

                // Fetch products for selection
                List<String> productList = db.getAllProducts();
                MultiSelectDialog multiSelectDialog = new MultiSelectDialog(this, productList);
                multiSelectDialog.setVisible(true); // Show the dialog

                // Process selected products
                if (multiSelectDialog.isConfirmed()) {
                    List<String> selectedProducts = multiSelectDialog.getSelectedProducts();
                    StringBuilder addedProducts = new StringBuilder(); // For accumulating added product names
                    StringBuilder errorProducts = new StringBuilder(); // For accumulating error messages

                    if (!selectedProducts.isEmpty()) {
                        for (String selectedProduct : selectedProducts) {
                            boolean productAdded = db.addProductToWishlist(userEmail, wishlistName, selectedProduct);
                            if (productAdded) {
                                addedProducts.append(selectedProduct).append(", "); // Add to successful list
                            } else {
                                errorProducts.append(selectedProduct).append(", "); // Add to error list
                            }
                        }

                        // Remove trailing comma and space
                        if (addedProducts.length() > 0) {
                            addedProducts.setLength(addedProducts.length() - 2);
                        }
                        if (errorProducts.length() > 0) {
                            errorProducts.setLength(errorProducts.length() - 2);
                        }

                        // Show a single message with all added products
                        String message = "Products added to wishlist: " + addedProducts.toString();
                        if (errorProducts.length() > 0) {
                            message += "\nError adding products: " + errorProducts.toString();
                        }
                        JOptionPane.showMessageDialog(this, message);
                    } else {
                        JOptionPane.showMessageDialog(this, "No products selected.");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Wishlist already exists!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Wishlist name cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed

        Database db = Database.getInstance();
        String userEmail = SessionManager.getLoggedInUserEmail(); // Get the logged-in user's email

        // Step 1: Fetch the wishlists for the user
        List<String> wishlistNames = db.getWishlistsByUser(userEmail);

        // Create a panel to hold the dropdown and action buttons
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS)); // Vertical layout

        // Step 2: Create a dropdown menu for wishlists
        JComboBox<String> wishlistDropdown = new JComboBox<>(wishlistNames.toArray(new String[0]));
        mainPanel.add(new JLabel("Select Wishlist:"));
        mainPanel.add(wishlistDropdown);

        // Step 3: Create buttons that operate on the selected wishlist
        JButton viewItemsButton = new JButton("View Items");
        JButton addItemButton = new JButton("Add Item");
        JButton deleteItemButton = new JButton("Delete Item");
        JButton deleteWishlistButton = new JButton("Delete Wishlist");

        mainPanel.add(viewItemsButton);
        mainPanel.add(addItemButton);
        mainPanel.add(deleteItemButton);
        mainPanel.add(deleteWishlistButton);

        // Step 4: Action to show items
        viewItemsButton.addActionListener(e -> {
            String selectedWishlist = (String) wishlistDropdown.getSelectedItem();
            System.out.println("Selected Wishlist: " + selectedWishlist); // Debug line

            List<String> items = db.getItemsInWishlist(userEmail, selectedWishlist);
            System.out.println("Items Retrieved: " + items); // Debug line

            // Display items in a JOptionPane
            StringBuilder itemList = new StringBuilder("Items in " + selectedWishlist + ":\n");
            if (items.isEmpty()) {
                itemList.append("No items found in this wishlist.");
            } else {
                for (String item : items) {
                    itemList.append(item).append("\n");
                }
            }
            JOptionPane.showMessageDialog(null, itemList.toString());
        });

        // Action to delete the wishlist
        deleteWishlistButton.addActionListener(e -> {
            String selectedWishlist = (String) wishlistDropdown.getSelectedItem();
            int confirmed = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this wishlist?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
            if (confirmed == JOptionPane.YES_OPTION) {
                boolean deleted = db.deleteWishlist(userEmail, selectedWishlist);
                if (deleted) {
                    JOptionPane.showMessageDialog(null, "Wishlist deleted successfully!");
                    // Refresh the dropdown
                    wishlistDropdown.setModel(new DefaultComboBoxModel<>(db.getWishlistsByUser(userEmail).toArray(new String[0])));
                } else {
                    JOptionPane.showMessageDialog(null, "Error deleting wishlist.");
                }
            }
        });

        // Action to add items to the wishlist
        addItemButton.addActionListener(e -> {
            String selectedWishlist = (String) wishlistDropdown.getSelectedItem();
            // Step 1: Fetch all products for selection
            List<String> productList = db.getAllProducts(); // Assuming you have this method in your Database class

            // Step 2: Show a dialog to allow multiple selections of products
            MultiSelectDialog multiSelectDialog = new MultiSelectDialog(this, productList);
            multiSelectDialog.setVisible(true); // Show the dialog

            // Step 3: Process selected products after dialog is closed
            if (multiSelectDialog.isConfirmed()) {
                List<String> selectedProducts = multiSelectDialog.getSelectedProducts();
                if (!selectedProducts.isEmpty()) {
                    StringBuilder addedItems = new StringBuilder("Added to " + selectedWishlist + ":\n");
                    for (String selectedProduct : selectedProducts) {
                        boolean productAdded = db.addProductToWishlist(userEmail, selectedWishlist, selectedProduct);
                        if (productAdded) {
                            addedItems.append(selectedProduct).append("\n");
                        } else {
                            JOptionPane.showMessageDialog(null, "Error adding product '" + selectedProduct + "' to wishlist.");
                        }
                    }
                    JOptionPane.showMessageDialog(null, addedItems.toString());
                } else {
                    JOptionPane.showMessageDialog(null, "No products selected.");
                }
            }
        });

        // Action to delete items from the wishlist
        deleteItemButton.addActionListener(e -> {
            String selectedWishlist = (String) wishlistDropdown.getSelectedItem();
            // Step 1: Fetch items in the selected wishlist
            List<String> itemsInWishlist = db.getItemsInWishlist(userEmail, selectedWishlist); // Fetch items in the current wishlist

            // Step 2: Show a dialog to allow multiple selections of items to delete
            MultiSelectDialog multiSelectDialog = new MultiSelectDialog(this, itemsInWishlist);
            multiSelectDialog.setVisible(true); // Show the dialog

            // Step 3: Process selected items after dialog is closed
            if (multiSelectDialog.isConfirmed()) {
                List<String> selectedItems = multiSelectDialog.getSelectedProducts(); // Assuming this returns the selected items
                if (!selectedItems.isEmpty()) {
                    StringBuilder removedItems = new StringBuilder("Removed from " + selectedWishlist + ":\n");
                    for (String selectedItem : selectedItems) {
                        boolean itemDeleted = db.deleteItemFromWishlist(userEmail, selectedWishlist, selectedItem); // Your method for deletion
                        if (itemDeleted) {
                            removedItems.append(selectedItem).append("\n");
                        } else {
                            JOptionPane.showMessageDialog(null, "Error deleting item '" + selectedItem + "' from wishlist.");
                        }
                    }
                    // Show removed items
                    JOptionPane.showMessageDialog(null, removedItems.toString());
                } else {
                    JOptionPane.showMessageDialog(null, "No items selected.");
                }
            }
        });

        // Show the panel in a dialog
        JOptionPane.showMessageDialog(null, mainPanel, "Manage Your Wishlists", JOptionPane.PLAIN_MESSAGE);

    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed

        String[] recipientOptions = {"Friend", "Father", "Sibling", "Mother", "Child"};
        String[] genderOptions = {"Male", "Female"};
        String[] ageGroupOptions = {"16-20", "21-25", "26-30"};

        // Select recipient type
        String recipientType = (String) JOptionPane.showInputDialog(
                null,
                "Select the type of recipient:",
                "Find Gift",
                JOptionPane.QUESTION_MESSAGE,
                null,
                recipientOptions,
                recipientOptions[0]
        );

        // Select gender
        String gender = (String) JOptionPane.showInputDialog(
                null,
                "Select the gender of the recipient:",
                "Find Gift",
                JOptionPane.QUESTION_MESSAGE,
                null,
                genderOptions,
                genderOptions[0]
        );

        // Select age group
        String ageGroup = (String) JOptionPane.showInputDialog(
                null,
                "Select the age group of the recipient:",
                "Find Gift",
                JOptionPane.QUESTION_MESSAGE,
                null,
                ageGroupOptions,
                ageGroupOptions[0]
        );

        if (recipientType != null && gender != null && ageGroup != null) {
            GiftFinder giftt = new GiftFinder();
            // Fetch gift options based on recipient type, gender, and age group
            List<Product> giftOptions = giftt.fetchGiftOptionsFromDatabase(recipientType, gender, ageGroup);

            if (giftOptions.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No gifts found for " + recipientType + " with gender " + gender + " and age group " + ageGroup);
            } else {
                StringBuilder giftsMessage = new StringBuilder("Available gifts for " + recipientType + ":\n\n");
                for (Product gift : giftOptions) {
                    giftsMessage.append(gift.getName())
                            .append(" - ")
                            .append(gift.getDescription())
                            .append(" ($")
                            .append(gift.getPrice())
                            .append(")\n");
                }
                JOptionPane.showMessageDialog(null, giftsMessage.toString());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selection canceled.");
        }


    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // This would be in your event listener for the "Surprise Me" button
        Random rand = new Random();
        int discount = rand.nextInt(41) + 10; // Generates discount between 10% and 50%
        countdownclass obj = new countdownclass();

// Show the offer to the user
        JOptionPane.showMessageDialog(null, "Surprise! Get " + discount + "% off on your next purchase. Offer expires in 5 minutes!");

// Set the generated discount for the checkout process
//surprisecheckout ob=new surprisecheckout();
        checkoutProcess.setSurpriseDiscount(discount); // Set the discount for the checkout

// Start the countdown timer if applicable
        obj.startCountdown(discount);


    }//GEN-LAST:event_jButton6ActionPerformed

    private void reviewsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reviewsActionPerformed

        // TODO add your handling code here:
        reviews ob = new reviews();
        ob.setVisible(true);
    }//GEN-LAST:event_reviewsActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       orders ob = new orders();
int orderId = this.orderId; // Make sure this is assigned correctly
String orderStatus = ob.getOrderStatus(orderId); // Fetch the status of the order

// Check if orderStatus is null
if (orderStatus == null) {
    JOptionPane.showMessageDialog(null, "Order status not found for Order ID: " + orderId, "Error", JOptionPane.ERROR_MESSAGE);
    return; // Exit if order status is not found
}

// Step 1: Check if the order can be canceled
if (orderStatus.equals("Shipped") || orderStatus.equals("Delivered")) {
    JOptionPane.showMessageDialog(null, "Order cannot be canceled as it has already been shipped or delivered.");
    return;
}

// Step 2: Confirm cancellation action
int confirmCancel = JOptionPane.showConfirmDialog(null, "Are you sure you want to cancel this order?", "Cancel Order", JOptionPane.YES_NO_OPTION);
if (confirmCancel != JOptionPane.YES_OPTION) {
    return; // User chose not to cancel the order
}

// Step 3: Update the order status to "Cancelled"
boolean isCancelled = ob.updateOrderStatus(orderId, "Cancelled");
if (isCancelled) {
    JOptionPane.showMessageDialog(null, "Your order has been successfully canceled.");

    // Step 4: Optionally process refund if applicable
    boolean refundSuccess = ob.processRefund(orderId);
    if (refundSuccess) {
        System.out.println("Refund processed successfully.");
        JOptionPane.showMessageDialog(null, "Refund processed successfully.");
    } else {
        System.out.println("Refund failed or not applicable.");
        JOptionPane.showMessageDialog(null, "Refund processing failed.");
    }
} else {
    JOptionPane.showMessageDialog(null, "Failed to cancel the order. Please try again.");
}

    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(customerdashboardfacade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(customerdashboardfacade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(customerdashboardfacade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(customerdashboardfacade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new customerdashboard().setVisible(true);
//            }
//        });
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new customerdashboardfacade().setVisible(true);
//            }
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseproducts;
    private javax.swing.JButton checkout;
    private javax.swing.JButton faqs;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton reviews;
    private javax.swing.JButton viewcart;
    // End of variables declaration//GEN-END:variables
}
