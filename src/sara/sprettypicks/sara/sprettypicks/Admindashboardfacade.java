/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sara.sprettypicks;
import java.awt.Component;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sarar
 */
public class Admindashboardfacade extends javax.swing.JFrame {

    /**
     * Creates new form Admindashboard
     */
    public Admindashboardfacade() {
        initComponents();
        setUserNameInTextFieldadmin();
    }
 private void setUserNameInTextFieldadmin() {
    String username = SessionManager.getLoggedInUserName(); // Assuming you have a method to get the logged-in username.
    
    // Set the username in jTextField2
    //jTextField2.setText(username);
    admin.setText(username);
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        addproducts = new javax.swing.JButton();
        deleteproducts = new javax.swing.JButton();
        showproducts = new javax.swing.JButton();
        viewcustomer = new javax.swing.JButton();
        deletecustomers = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        vieworders = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Product_table = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        admin = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        customer_table = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        adminTextArea = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        searchfield = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        review_table = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        order_table = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 204, 255));

        jPanel2.setBackground(new java.awt.Color(102, 153, 255));

        addproducts.setBackground(new java.awt.Color(153, 255, 102));
        addproducts.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 12)); // NOI18N
        addproducts.setText("Add Products");
        addproducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addproductsActionPerformed(evt);
            }
        });

        deleteproducts.setBackground(new java.awt.Color(153, 255, 102));
        deleteproducts.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 12)); // NOI18N
        deleteproducts.setText("Delete Products");
        deleteproducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteproductsActionPerformed(evt);
            }
        });

        showproducts.setBackground(new java.awt.Color(153, 255, 102));
        showproducts.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 12)); // NOI18N
        showproducts.setText("View Products");
        showproducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showproductsActionPerformed(evt);
            }
        });

        viewcustomer.setBackground(new java.awt.Color(153, 255, 102));
        viewcustomer.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 12)); // NOI18N
        viewcustomer.setText("View Customers");
        viewcustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewcustomerActionPerformed(evt);
            }
        });

        deletecustomers.setBackground(new java.awt.Color(153, 255, 102));
        deletecustomers.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 12)); // NOI18N
        deletecustomers.setText("Delete Customers");
        deletecustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletecustomersActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(153, 255, 102));
        jButton7.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 12)); // NOI18N
        jButton7.setText("Show Reviews");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        vieworders.setBackground(new java.awt.Color(153, 255, 102));
        vieworders.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 12)); // NOI18N
        vieworders.setText("View Orders");
        vieworders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewordersActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(153, 255, 102));
        jButton4.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 12)); // NOI18N
        jButton4.setText("update prod_info");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deletecustomers, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                    .addComponent(deleteproducts, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewcustomer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(vieworders, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(showproducts, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addproducts, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 34, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(addproducts)
                .addGap(26, 26, 26)
                .addComponent(deleteproducts)
                .addGap(34, 34, 34)
                .addComponent(showproducts)
                .addGap(29, 29, 29)
                .addComponent(viewcustomer)
                .addGap(28, 28, 28)
                .addComponent(deletecustomers)
                .addGap(34, 34, 34)
                .addComponent(jButton7)
                .addGap(30, 30, 30)
                .addComponent(vieworders)
                .addGap(33, 33, 33)
                .addComponent(jButton4)
                .addContainerGap(300, Short.MAX_VALUE))
        );

        Product_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Prod_id", "Prod_name", "price", "prod_category", "prod_description", "quantity"
            }
        ));
        jScrollPane1.setViewportView(Product_table);

        jPanel3.setBackground(new java.awt.Color(153, 255, 255));

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel1.setText("Admin Dashboard");

        jButton1.setBackground(new java.awt.Color(255, 153, 0));
        jButton1.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jButton1.setText("Sign out");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        admin.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        admin.setText("jLabel2");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(236, 236, 236)
                .addComponent(admin, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(412, 412, 412)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                        .addComponent(admin))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        customer_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "cust_username", "cust_email", "cust_firstname", "cust_lastname"
            }
        ));
        jScrollPane2.setViewportView(customer_table);

        jButton2.setBackground(new java.awt.Color(153, 255, 102));
        jButton2.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 12)); // NOI18N
        jButton2.setText("Notify customers");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        adminTextArea.setColumns(20);
        adminTextArea.setRows(5);
        jScrollPane3.setViewportView(adminTextArea);

        jLabel3.setText("Enter Product id");

        jButton3.setText("search");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        review_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "review_id", "product_id", "cust_username", "review", "experiance"
            }
        ));
        jScrollPane4.setViewportView(review_table);
        if (review_table.getColumnModel().getColumnCount() > 0) {
            review_table.getColumnModel().getColumn(0).setPreferredWidth(3);
            review_table.getColumnModel().getColumn(1).setPreferredWidth(3);
            review_table.getColumnModel().getColumn(2).setPreferredWidth(5);
            review_table.getColumnModel().getColumn(3).setPreferredWidth(19);
            review_table.getColumnModel().getColumn(4).setPreferredWidth(5);
        }

        jScrollPane6.setBackground(new java.awt.Color(204, 255, 204));
        jScrollPane6.setForeground(new java.awt.Color(153, 255, 153));

        order_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "order_id", "cust_username", "order_date", "order_status", "shipping_address"
            }
        ));
        jScrollPane5.setViewportView(order_table);

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 14)); // NOI18N
        jLabel2.setText("Send Broad cast Message");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(86, 86, 86)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(searchfield, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(26, 26, 26)
                                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 690, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(787, 787, 787)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(459, 758, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(searchfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton3))
                                .addGap(20, 20, 20)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 321, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1134, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        loginformfacade logout=new loginformfacade();
        logout.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void viewcustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewcustomerActionPerformed
        // TODO add your handling code here:
        Database db = Database.getInstance();
        // Clear existing rows in the table before showing customer data
        DefaultTableModel tableModel = (DefaultTableModel) customer_table.getModel();
        tableModel.setRowCount(0);

        try {
            // Retrieve the database connection
            Connection conn = db.connect();

            // SQL query to retrieve all customer information
            String sql = "SELECT cuser_name, email, first_name, last_name FROM customers";
            PreparedStatement pstmt = conn.prepareStatement(sql);

            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                String customerUsername = rs.getString("cuser_name");
                String firstName = rs.getString("email");
                String lastName = rs.getString("first_name");
                String email = rs.getString("last_name");

                // Add customer row to the table
                tableModel.addRow(new Object[]{customerUsername, firstName, lastName, email});
            }

            rs.close();
            pstmt.close();

        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error retrieving customer data from the database.");
        }
    }//GEN-LAST:event_viewcustomerActionPerformed

    private void showproductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showproductsActionPerformed
        Database db = Database.getInstance();
        // Clear existing rows in the table before showing products
        DefaultTableModel tableModel = (DefaultTableModel) Product_table.getModel();
        tableModel.setRowCount(0);

        try {
            // Retrieve the database connection
            Connection conn = db.connect();

            // SQL query to retrieve all products (excluding image)
            String sql = "SELECT product_id, name, price, category, description, quantity FROM products";
            PreparedStatement pstmt = conn.prepareStatement(sql);

            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                String productId = rs.getString("product_id");
                String productName = rs.getString("name");
                double price = rs.getDouble("price");
                String category = rs.getString("category");
                String description = rs.getString("description");
                int quantity = rs.getInt("quantity");

                // Add product row to the table without image
                tableModel.addRow(new Object[]{productId, productName, price, category, description, quantity});
            }

            rs.close();
            pstmt.close();

        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error retrieving product data from the database.");
        }
    }//GEN-LAST:event_showproductsActionPerformed

    private void deleteproductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteproductsActionPerformed
        // Get the selected row index
        int selectedRow = Product_table.getSelectedRow();

        if (selectedRow == -1) {
            // No row is selected, show an error message
            JOptionPane.showMessageDialog(this, "Please select a product to delete.");
            return;
        }

        // Get the product ID from the selected row (assuming it's in the first column)
        DefaultTableModel tableModel = (DefaultTableModel) Product_table.getModel();
        String productId = tableModel.getValueAt(selectedRow, 0).toString();

        // Confirm the deletion action
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this product?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return; // If user clicks 'No', exit the method
        }

        // Database instance
        Database db = Database.getInstance();
        Connection conn = null;

        try {
            // Establish the connection
            conn = db.connect();
            conn.setAutoCommit(false);  // Start transaction

            // Step 1: Check if the product exists in the cart table
            String checkCartSql = "SELECT COUNT(*) FROM cart WHERE product_id = ?";
            PreparedStatement checkCartStmt = conn.prepareStatement(checkCartSql);
            checkCartStmt.setString(1, productId);

            ResultSet cartResult = checkCartStmt.executeQuery();
            cartResult.next(); // Move to the first result
            int cartCount = cartResult.getInt(1); // Get the count of rows with this product_id in the cart table

            System.out.println("Cart Count: " + cartCount); // Debugging statement to check cart count

            cartResult.close();
            checkCartStmt.close();

            if (cartCount > 0) {
                // If the product exists in the cart table, delete it from the cart first
                String deleteFromCartSql = "DELETE FROM cart WHERE product_id = ?";
                PreparedStatement deleteFromCartStmt = conn.prepareStatement(deleteFromCartSql);
                deleteFromCartStmt.setString(1, productId);
                int cartRowsDeleted = deleteFromCartStmt.executeUpdate();
                System.out.println("Rows deleted from cart: " + cartRowsDeleted);  // Debugging statement to check if item was deleted
                deleteFromCartStmt.close();

                // Now show a message to the user that the product was removed from the cart
                JOptionPane.showMessageDialog(this, "Product was removed from the cart.");
            }

            // Step 2: Delete the product from the products table
            String deleteProductSql = "DELETE FROM products WHERE product_id = ?";
            PreparedStatement productStmt = conn.prepareStatement(deleteProductSql);
            productStmt.setString(1, productId);

            int rowsDeleted = productStmt.executeUpdate(); // Execute the deletion from the products table
            System.out.println("Rows deleted from products table: " + rowsDeleted);  // Debugging statement

            productStmt.close();

            if (rowsDeleted > 0) {
                // If the deletion was successful, remove the row from the table
                tableModel.removeRow(selectedRow);
                JOptionPane.showMessageDialog(this, "Product deleted successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Error: Product not found in the database.");
            }

            // Commit the transaction
            conn.commit();

        } catch (SQLException ex) {
            // Handle SQLException which may include foreign key constraint violation
            if (conn != null) {
                try {
                    // Rollback in case of an error
                    conn.rollback();
                } catch (SQLException rollbackEx) {
                    rollbackEx.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error during rollback: " + rollbackEx.getMessage());
                }
            }

            // Handle specific error codes
            if (ex.getErrorCode() == 1451) { // MySQL error code for foreign key constraint violation
                // JOptionPane.showMessageDialog(this, "Cannot delete the product. It is currently in someone's cart. Please remove it from the cart first.");
            } else {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error deleting product from the database: " + ex.getMessage());
            }
        } finally {
            // Ensure the connection is closed regardless of success or failure
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException closeEx) {
                    closeEx.printStackTrace();
                }
            }
        }

    }//GEN-LAST:event_deleteproductsActionPerformed

    private void addproductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addproductsActionPerformed
        Addproducts ob=new Addproducts();
        ob.setVisible(true);
        //setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_addproductsActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
  // Admin sends a notification
notifycustomers admin = new notifycustomers();
String message = adminTextArea.getText().trim(); // Assume `adminTextArea` is the JTextArea for admin input

if (message != null && !message.isEmpty()) {
    // Send notification to all customers (both save to DB and notify through Observer)
    Database db=Database.getInstance();
   db.sendNotificationToAllCustomers(message);

    // Notify all customers via Observer pattern
    List<Customer> allCustomers = db.getCustomersFromDatabase();
    for (Customer customer : allCustomers) {
        customer.update(message); // Notify the customer via Observer pattern
    }

    JOptionPane.showMessageDialog(null, "Notification sent to all customers!");

    // Clear the admin text area after sending the message
    adminTextArea.setText("");
} else {
    JOptionPane.showMessageDialog(null, "Message cannot be empty!");
}


// Method to get customers from the database




    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try {
        // Step 1: Get the entered product ID from the input field
        String productId = searchfield.getText(); // Assuming jTextField1 is your input field for Product ID
        
        // Step 2: Search for the product in the database
        Database db=Database.getInstance();
        Connection conn = db.connect(); // Adjust this to your DB connection method
        String query = "SELECT * FROM products WHERE product_id = ?";
        PreparedStatement stmt = conn.prepareStatement(query);
        stmt.setString(1, productId);
        ResultSet rs = stmt.executeQuery();
        
        // Step 3: Populate the product_table
        DefaultTableModel model = (DefaultTableModel) Product_table.getModel();
        model.setRowCount(0); // Clear the table before adding results
        
        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getString("product_id"),
                rs.getString("name"),
                rs.getDouble("price"),
                 rs.getString("category"),
                  rs.getString("description"),
                rs.getInt("quantity")
            });
        }
        
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No product found with the given Product ID.");
        }

        // Closing resources
        rs.close();
        stmt.close();
        conn.close();
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }


    }//GEN-LAST:event_jButton3ActionPerformed

    private void deletecustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletecustomersActionPerformed
        // TODO add your handling code here:
         try {
        // Step 1: Check if a row is selected in the customer table
        int selectedRow = customer_table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a customer to delete.");
            return;
        }

        // Step 2: Fetch the customer ID of the selected row
        String customerId = customer_table.getValueAt(selectedRow, 0).toString(); // Assuming customer_id is in the first column

        // Step 3: Confirm deletion
        int confirm = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to delete this customer?",
            "Confirm Delete",
            JOptionPane.YES_NO_OPTION
        );
        if (confirm != JOptionPane.YES_OPTION) {
            return; // User canceled the deletion
        }
Database db=Database.getInstance();
        // Step 4: Delete the customer from the database
        Connection conn = db.connect(); // Adjust this to your DB connection method
        String deleteQuery = "DELETE FROM customers WHERE cuser_name = ?";
        PreparedStatement stmt = conn.prepareStatement(deleteQuery);
        stmt.setString(1, customerId);
        int rowsAffected = stmt.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Customer deleted successfully.");

            // Step 5: Remove the row from the table
            ((DefaultTableModel) customer_table.getModel()).removeRow(selectedRow);
        } else {
            JOptionPane.showMessageDialog(this, "Failed to delete the customer. Please try again.");
        }

        // Close resources
        stmt.close();
        conn.close();
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
    }//GEN-LAST:event_deletecustomersActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        
        try {
        // Step 1: Establish database connection
        Database db=Database.getInstance();
        Connection conn = db.connect(); // Adjust this to your DB connection method

        // Step 2: Create SQL query to fetch review data
        String query = "SELECT review_id, product_id, customer_username, review_text, experience FROM reviews"; 
        PreparedStatement stmt = conn.prepareStatement(query);

        // Step 3: Execute the query
        ResultSet rs = stmt.executeQuery();

        // Step 4: Populate the review_table
        DefaultTableModel model = (DefaultTableModel) review_table.getModel();
        model.setRowCount(0); // Clear any existing rows in the table

        while (rs.next()) {
            // Fetch review data from the database
            String reviewId = rs.getString("review_id");
            String productId = rs.getString("product_id");
            String customerId = rs.getString("customer_username");
            String reviewText = rs.getString("review_text");
            String rating = rs.getString("experience");

            // Add a new row to the table
            model.addRow(new Object[]{reviewId, productId, customerId, reviewText, rating});
        }

        // Check if there are no reviews
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No reviews found in the database.");
        }

        // Close resources
        rs.close();
        stmt.close();
        conn.close();
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void viewordersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewordersActionPerformed
        // TODO add your handling code here:
        
         try {
        // Step 1: Establish database connection
        Database db=Database.getInstance();
        Connection conn = db.connect(); // Replace with your connection method

        // Step 2: Define the SQL query to fetch order data
        String query = "SELECT order_id, user_name, order_date, order_status, shipping_address FROM orders";
        PreparedStatement stmt = conn.prepareStatement(query);

        // Step 3: Execute the query and get results
        ResultSet rs = stmt.executeQuery();

        // Step 4: Populate the order_table
        DefaultTableModel model = (DefaultTableModel) order_table.getModel();
        model.setRowCount(0); // Clear any existing rows

        while (rs.next()) {
            // Fetch order details from the result set
            String orderId = rs.getString("order_id");
            String username = rs.getString("user_name");
            String orderDate = rs.getString("order_date");
            String orderStatus = rs.getString("order_status");
            String shippingAddress = rs.getString("shipping_address");

            // Add the fetched data as a new row in the table
            model.addRow(new Object[]{orderId, username, orderDate, orderStatus, shippingAddress});
        }

        // If no rows are returned, display a message
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No orders found.");
        }

        // Close resources
        rs.close();
        stmt.close();
        conn.close();
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
    }//GEN-LAST:event_viewordersActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        updateproductinfo ob=new updateproductinfo();
        ob.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admindashboardfacade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admindashboardfacade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admindashboardfacade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admindashboardfacade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Admindashboardfacade().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Product_table;
    private javax.swing.JButton addproducts;
    private javax.swing.JLabel admin;
    private javax.swing.JTextArea adminTextArea;
    private javax.swing.JTable customer_table;
    private javax.swing.JButton deletecustomers;
    private javax.swing.JButton deleteproducts;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable order_table;
    private javax.swing.JTable review_table;
    private javax.swing.JTextField searchfield;
    private javax.swing.JButton showproducts;
    private javax.swing.JButton viewcustomer;
    private javax.swing.JButton vieworders;
    // End of variables declaration//GEN-END:variables
}
